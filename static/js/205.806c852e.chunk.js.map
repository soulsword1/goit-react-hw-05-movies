{"version":3,"file":"static/js/205.806c852e.chunk.js","mappings":"4PAEaA,EAAYC,EAAAA,EAAAA,IAAH,4CAITC,EAAWD,EAAAA,EAAAA,IAAH,+CAkBRE,GAdWF,EAAAA,EAAAA,GAAH,sNAcKA,EAAAA,EAAAA,GAAH,2EAMVG,EAAqBH,EAAAA,EAAAA,GAAH,2H,SC1BhB,SAASI,EAAT,GAAuC,IAAVC,EAAS,EAATA,MAElCC,EACND,EADMC,MAAOC,EACbF,EADaE,aAAcC,EAC3BH,EAD2BG,YAAaC,EACxCJ,EADwCI,aAAcC,EACtDL,EADsDK,SAAUC,EAChEN,EADgEM,OAE5DC,EAAM,6CAAyCJ,GAErD,OADAK,QAAQC,OAEN,UAACf,EAAD,YACE,SAACE,EAAD,CAAUc,IAAKH,EAAQI,IAAKV,EAAOW,MAAM,MAAMC,OAAO,SACtD,0BACGZ,EADH,IARY,SAAAC,GAAY,OAAIA,EAAaY,OAAO,EAAG,EAA3B,CASbC,CAAQb,GADnB,QAGA,wCAAgBc,KAAKC,MAAqB,IAAfb,GAAsB,QACjD,sCACA,uBAAIC,KACJ,oCACA,SAACR,EAAD,UACGS,EAAOY,KAAI,SAAAC,GAAC,OACX,wBAAgBA,EAAEC,MAATD,EAAEE,GADA,OAIf,4CACA,UAACvB,EAAD,YACE,yBACE,SAAC,KAAD,CAAMwB,GAAG,OAAT,qBAEF,yBACE,SAAC,KAAD,CAAMA,GAAG,UAAT,4BAKT,CCjCM,IAAMC,GAAS5B,EAAAA,EAAAA,GAAO6B,EAAAA,GAAP7B,CAAH,ilBCDJ,SAAS8B,EAAT,GAAmC,IAAbC,EAAY,EAAZA,SACnC,OACE,+BACE,SAACH,EAAD,CAAQD,GAAII,EAAZ,6CAGL,CCFc,SAASC,IAAgC,IAAD,IAC7CC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA0BE,EAAAA,EAAAA,UAAS,MAAnC,eAAO9B,EAAP,KAAc+B,EAAd,KACML,GAAWM,EAAAA,EAAAA,MACXC,GAAmBC,EAAAA,EAAAA,QAAM,oBAACR,EAASS,aAAV,aAAC,EAAgBC,YAAjB,QAAyB,WAUxD,OARA5B,QAAQC,IAAIwB,IAEZI,EAAAA,EAAAA,YAAU,WACJT,GCfO,SAA8BP,GAC3C,IAEMiB,EAAG,6CAAyCjB,EAAzC,oBAFO,oCAIhB,OAAOkB,MAAMD,GAAKE,MAAK,SAAAC,GACrB,OAAIA,EAAIC,GACCD,EAAIE,OAGNC,QAAQC,OAAO,IAAIC,MAAM,oKACjC,GACF,CDIKC,CAAqBnB,GAASY,MAAK,SAAAQ,GAAI,OAAIjB,EAASiB,EAAb,GAE1C,GAAE,CAACpB,KAGF,iCACE,SAACH,EAAD,CAAYC,SAAUO,EAAiBgB,UACtCjD,IACC,gCACE,SAACD,EAAD,CAAmBC,MAAOA,KAC1B,SAAC,EAAAkD,SAAD,CAAUC,UAAU,wCAApB,UACE,SAAC,KAAD,WAMX,C","sources":["components/MoviesDetailsItem/MoviesDetailsItem.styled.js","components/MoviesDetailsItem/MoviesDetailsItem.js","components/BackButton/BackButton.styled.js","components/BackButton/BackButton.js","pages/MovieDetails.js","services/FetchMovieDetailsAPI.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n    padding: 40px;\n`\n\nexport const MovieImg = styled.img`\n  border-radius: 5px;\n`;\n\nexport const CastItem = styled.li`\n  padding: 10px;\n  width: 200px;\n\n  text-align: center;\n  overflow: hidden;\n  border: 1px solid #647c90;\n  border-radius: 10px;\n\n  &:not(:last-child){\n    margin-bottom: 5px;\n  }\n`;\n\nexport const GenresList = styled.ul`\n  list-style: none;\n  margin: 0;\n  padding: 0;\n`\n\nexport const AdditionalinfoList = styled.ul`\n  color: #3B3B3B;\n  text-decoration: none;    \n  list-style: none;\n  margin: 0;\n  padding: 0;\n`\n","import { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { Container, MovieImg, GenresList, AdditionalinfoList } from './MoviesDetailsItem.styled';\n\nexport default function MoviesDetailsItem({ movie }) {\n  const getYear = release_date => release_date.substr(0, 4);\n  const { title, release_date, poster_path, vote_average, overview, genres } =\n    movie;\n  const imgUrl = `https://image.tmdb.org/t/p/original${poster_path}`;\n  console.log();\n  return (\n    <Container>\n      <MovieImg src={imgUrl} alt={title} width=\"300\" height=\"400\" />\n      <h1>\n        {title}({getYear(release_date)})\n      </h1>\n      <p>User Score: {Math.round(vote_average * 100) / 100}</p>\n      <h2>Overview</h2>\n      <p>{overview}</p>\n      <h3>Genres</h3>\n      <GenresList>\n        {genres.map(g => (\n          <li key={g.id}>{g.name}</li>\n        ))}\n      </GenresList>\n      <p>Additional info</p>\n      <AdditionalinfoList>\n        <li>\n          <Link to=\"cast\">Cast</Link>\n        </li>\n        <li>\n          <Link to=\"reviews\">Reviews</Link>\n        </li>\n      </AdditionalinfoList>\n    </Container>\n  );\n}\n\nMoviesDetailsItem.propTypes = {\n  movie: PropTypes.shape({\n    release_date: PropTypes.string,\n    title: PropTypes.string,\n    poster_path: PropTypes.string,\n    vote_average: PropTypes.number,\n    overview: PropTypes.string,\n    genres: PropTypes.array,\n  }),\n};\n","import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\n\nexport const Button = styled(Link)`\n  display: inline-block;\n  margin: 0 auto;\n  margin-left: 15px;\n  padding: 10px;\n\n  cursor: pointer;\n  color: #fff;\n  text-decoration: none;\n  background-color: #647c90;\n  border-radius: 5px;\n  border: 1px solid transparent;\n  transition: color 250ms cubic-bezier(0.4, 0, 0.2, 1),\n    background-color 250ms cubic-bezier(0.4, 0, 0.2, 1),\n    border 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:not(:last-child) {\n    margin-right: 10px;\n  }\n\n  &:hover,\n  &:focus {\n    color: #647c90;\n    background-color: #fff;\n    border: 1px solid #647c90;\n  }\n`;\n","import { Button } from './BackButton.styled';\n\nexport default function BackButton({ location }) {\n  return (\n    <>\n      <Button to={location}>Назад</Button>\n    </>\n  );\n}\n","import { useState, useEffect, useRef, Suspense } from 'react';\nimport { useParams, useLocation, Outlet } from 'react-router-dom';\nimport FetchMovieDetailsAPI from '../services/FetchMovieDetailsAPI';\nimport MoviesDetailsItem from '../components/MoviesDetailsItem/MoviesDetailsItem';\nimport BackButton from '../components/BackButton';\n\nexport default function ImageGalleryMovieDetailsItem() {\n  const { movieId } = useParams();\n  const [movie, setMovie] = useState(null);\n  const location = useLocation();\n  const backLinkLocation = useRef(location.state?.from ?? '/movies');\n\n  console.log(backLinkLocation);\n\n  useEffect(() => {\n    if (movieId) {\n      FetchMovieDetailsAPI(movieId).then(data => setMovie(data));\n    }\n  }, [movieId]);\n\n  return (\n    <>\n      <BackButton location={backLinkLocation.current} />\n      {movie && (\n        <section>\n          <MoviesDetailsItem movie={movie} />\n          <Suspense fallback={<div>Loading...</div>}>\n            <Outlet />\n          </Suspense>\n        </section>\n      )}\n    </>\n  );\n}\n","export default function FetchMovieDetailsAPI(id) {\n  const api_key = '9852f66ffe27e9e772243ba7caefae3c';\n\n  const url = `https://api.themoviedb.org/3/movie/${id}?api_key=${api_key}`;\n\n  return fetch(url).then(res => {\n    if (res.ok) {\n      return res.json();\n    }\n\n    return Promise.reject(new Error('Информация о фильме не найдена'));\n  });\n}"],"names":["Container","styled","MovieImg","GenresList","AdditionalinfoList","MoviesDetailsItem","movie","title","release_date","poster_path","vote_average","overview","genres","imgUrl","console","log","src","alt","width","height","substr","getYear","Math","round","map","g","name","id","to","Button","Link","BackButton","location","ImageGalleryMovieDetailsItem","movieId","useParams","useState","setMovie","useLocation","backLinkLocation","useRef","state","from","useEffect","url","fetch","then","res","ok","json","Promise","reject","Error","FetchMovieDetailsAPI","data","current","Suspense","fallback"],"sourceRoot":""}